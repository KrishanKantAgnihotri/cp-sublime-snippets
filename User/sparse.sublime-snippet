<snippet>
	<content><![CDATA[
//define it as  
// sparse_table<ll> st(d, n, [] (ll x, ll y) 
//     {
//         return __gcd(x, y);
//     });
//where d is your vector on which you want to build sparse 
//__gcd is any binary function
// https://codeforces.com/blog/entry/
template<typename T>
struct sparse_table 
{
    using F = function<T(const T&, const T&)>;
 
    int n;
    vector<vector<T>> mat;
    F f;
    sparse_table() : n(), f() {}
 
    template<typename U>
    sparse_table(const U& arr, int n, F f): n(n), f(f), mat((int) log2(n) + 1) 
    {
        mat[0].resize(n);
        for (int i = 0; i < n; i++)
        {
            mat[0][i] = T(arr[i]);
        }
        for (int j = 1; j < int(mat.size()); j++) {
 
            mat[j].resize(n - (1 << j) + 1);
            for (int i = 0; i + (1 << j) <= n; i++) 
            {
                mat[j][i] = f(mat[j - 1][i], mat[j - 1][i + (1 << (j - 1))]);
            }
        }
    }
 
    T query(int l, int r) //[ 0 .. n-1]
    {
        int j = 32 - __builtin_clz(r - l + 1) - 1;
        return f(mat[j][l], mat[j][r + 1 - (1 << j)]);
    }
};

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>sparse</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
