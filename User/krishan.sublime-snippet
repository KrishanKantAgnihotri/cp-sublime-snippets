<snippet>
	<content><![CDATA[
//Author : Krishan Kant Agnihotri        
#include<bits/stdc++.h>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

//ordered_set
template<class T> using oset =tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update> ;
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>

//find_by_order(k)  returns iterator to kth element starting from 0;
//order_of_key(k) returns count of elements strictly smaller than k;
//erase,insert same as normal set
//define it as oset<int> s; or oset<pair<int,int>> s;

//bunch of pragmas
#pragma GCC optimize("O3")
#pragma GCC optimize("Ofast,unroll-loops,no-stack-protector,fast-math")
#pragma comment(linker, "/stack:200000000")
#pragma GCC target("sse,sse2,sse3,sse4,popcnt,abm,mmx,tune=native")


//#pragma Gcc target("avx2,fma,avx")
//(Uncomment when needed and be sure it not give TLE bcoz it requires time)
//#pragma GCC optimize "trapv"//to check integer overflow and gives RE.

//macros
#define ull unsigned long long int
#define ll long long
#define ii pair<int,int>
#define vii vector<ii>
#define vi vector<int>
#define vl vector<ll>
#define mii map<int,int>
#define uii unordered_map<int,int>
#define all(x) x.begin(),x.end()
#define ff first
#define fr(i,a,b) for(int i= a ;i<=b ;i++)
#define ss second
#define fast_io ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
#define endl "\n"
#define pb push_back
#define INF 1e18
#define lcm(a,b) a*b/__gcd(a,b)
#define print(x) cout<<x<<"\n";
#define scanv(v,n) for(int i  = 0 ; i<n ;i++ ) cin>>v[i];
#define printv(v) for(auto it : v) cout<<it<<" ";
#define rall(v) v.rbegin(),v.rend()
#define GOOGLE(i) cout<<"Case"<<" #"<<i<<": ";
#define Time cerr<<"\nTime Taken : "<<(float)(clock()-time_p)/CLOCKS_PER_SEC<<"\n";
clock_t time_p=clock();

//boost for big int 
//#include<boost/multiprecision/cpp_int.hpp>
//uncoment for large int requirement
//using boost::multiprecision::cpp_int;

//forced_functions 
void file_io(){
fast_io
    #ifndef ONLINE_JUDGE
    freopen("inputa.txt","r",stdin);
    freopen("outputa.txt","w",stdout);
    freopen("log.txt","w",stderr);
    #endif
}

//safe_hash
struct custom_hash {
    static uint64_t splitmix64(uint64_t x) {
        // http://xorshift.di.unimi.it/splitmix64.c
        x += 0x9e3779b97f4a7c15;
        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
        return x ^ (x >> 31);
    }

    size_t operator()(uint64_t x) const {
        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
        return splitmix64(x + FIXED_RANDOM);
    }
};
//use it with unordered_map<T,T,custom_hash> safe_map

//const
const long long int MOD = 1e9+7;
const long long int MOD2 = (119<<23)+1;//(119<<23)+1==998244353

//fenwick_tree
template<typename T>
struct FenwickTree
{
    T N;
    vector<int> tree;

    void init(int n)
    {
        N = n;
        tree.assign(n + 1, 0);
    }

    void update(int idx, T val)
    {
        while (idx <= N)
        {
            tree[idx] += val;
            idx += idx & -idx;
        }
    }

    void updateMax(int idx, T val)
    {
        while (idx <= N)
        {
            tree[idx] = max(tree[idx], val);
            idx += idx & -idx;
        }
    }

    T pref(int idx)
    {
        T ans = 0;
        while (idx > 0)
        {
            ans += tree[idx];
            idx -= idx & -idx;
        }
        return ans;
    }

    T rsum(int l, int r)
    {
        return pref(r) - pref(l - 1);
    }

    T prefMax(int idx)
    {
        T ans = -2e9;
        while (idx > 0)
        {
            ans = max(ans, tree[idx]);
            idx -= idx & -idx;
        }
        return ans;
    }
};

//segtree
struct SegTree {
    typedef int T;
    static constexpr T unit = 0;
    T f(T a, T b) { return a+b; } // (any associative fn)
    vector<T> s; int n;
    SegTree(int _n = 0, T def = unit) : s(2*_n, def), n(_n) {}
    void update(int pos, T val) {
        for (s[pos += n] = val; pos /= 2;)
            s[pos] = f(s[pos * 2], s[pos * 2 + 1]);
    }
    T query(int b, int e) { // query [b, e)
        T ra = unit, rb = unit;
        for (b += n, e += n; b < e; b /= 2, e /= 2) {
            if (b % 2) ra = f(ra, s[b++]);
            if (e % 2) rb = f(s[--e], rb);
        }
        return f(ra, rb);
    }
    /*    void modify(int l, int r, int value) {// if update is l to r
  for (l += n, r += n; l < r; l >>= 1, r >>= 1) {
    if (l&1) s[l++] += value;
    if (r&1) s[--r] += value;
  }
}

T query(int p) {// if query is about one pos
  int res = 0;
  for (p += n; p > 0; p >>= 1) res += s[p];
  return res;
}*/
};

//fast_expo + MOD

ll ipowM(ll base ,ll exp,ll MOD){
    ll res = 1;
    while(exp>0){
        if(exp&1) res = (res*base)%MOD;
        exp>>=1;
        base = (base*base)%MOD;
    }
return res;
}
//INVERSE 
ll invM(ll num ,ll m){
    return ipowM(num,m-2,m);
}
//simple power
ll ipow(ll base ,ll exp){
    ll res = 1;
    while(exp>0){
        if(exp&1) res = (res*base);
        exp>>=1;
        base = (base*base);
    }
return res;
}

//combi
const long long int x = 100 ;
ll fact[x+1];
ll ifact[x+1];
void prefact(ll MOD){
    fact[0]=1;
    ifact[0]=1;
    for(ll i = 1 ;i<=x ;i++){
        fact[i] = (fact[i-1]*i)%MOD;
        ifact[i] = (ifact[i-1]*invM(i,MOD))%MOD;
    }
}
ll add(ll a,ll b){
    return (a+b)%MOD;
}
ll mul(ll a,ll b){
    return (a*1LL*b)%MOD;
}
ll C(ll n,ll k){
    if(k>n)
        return 0;
    return mul(fact[n],mul(ifact[n-k],ifact[k]))%MOD;
}

//sieve stuff
const int MAXN = 100;
vector <int> prime;
 bool is_composite[MAXN];

void sieve (int n) {
    fill (is_composite, is_composite + n, false);
     for (int i = 2; i < n; ++i) {
    if (!is_composite[i]) prime.push_back (i);
         for (int j = 0; j < (int)prime.size () && i * prime[j] < n; ++j) {
             is_composite[i * prime[j]] = true;
             if (i % prime[j] == 0) break;
         }
     }
 }
 //complete this function for factor related stuff
void sieve2(ll n){
   for(int i = 2 ;i<=n ;i++){
    for(int j = 2*i ;j<=n ;j+=i)//if not factor related stuff than start it i*i
;
   }

}
//random
ll stoii(string s){
    ll ans = 0;
    for(auto it: s){
        ll cur = it-'0';
        ans = ans*10+cur;
    }
    return ans;
}

//matrix stuff
int dx[]={-1,0,1,0};
int dy[]={0,1,0,-1};

bool test = true;
bool file = true;
void solve(){

}
int main(){
    if(file)
      file_io();
    //sieve(MAXN);
    //prefact(MOD2);
    //SegTree<int> s;
    //FenwickTree<int> f;
    int t ;
    t = 1 ;
    if(test)
    cin>>t;
    while(t--){
            solve();

    }
    Time
}

]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>kk</tabTrigger> 
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
